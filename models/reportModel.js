// Generated by CoffeeScript 1.6.1
(function() {
  var Response, getDateNumber, getDepartTreeData, parseDepartments, parseUsers, userModel, utils;

  Response = require('../vo/Response').Response;

  userModel = require('./usersModel');

  utils = require("../utils");

  var content_template = "<H1>ABC123</H1>";
	
  exports.createReport = function(userId, content, dateStr, callback) {
    var client;
    client = utils.createClient();
    return client.incr("next_report_id", function(err, reportId) {
      var score;
      if (err) {
        return utils.showDBError(callback, client);
      }
      score = getDateNumber(dateStr);
	  //console.log('getDateNumber dateStr:' + dateStr);
	  console.log('reportModel-getDateNumber score:' + score);
      return client.zadd("userid:" + userId + ":reportIds", score, reportId, function(err, reply) {
        if (err) {
          return utils.showDBError(callback, client);
        }
		
        return client.hmset("userid:" + userId + ":reports", "" + reportId + ":date", dateStr, "" + reportId + ":content", content, function(err, reply) {
          if (err) {
            return utils.showDBError(callback, client);
          }
		  
		  // record the report in this week's table for the show in main page
		  return getUserName(userId, function(userName){
			return client.hset(dateStr, "" + userId + ":" + userName, content, function(err, reply) {
			  if (err) {
				return utils.showDBError(callback, client);
			  }
		       
			  client.quit();
              return callback(new Response(1, 'success', reply));
		    });
		  });
        });
      });
    });
  };

  createReport = function(userId, content, dateStr, callback) {
    var client;
    client = utils.createClient();
    return client.incr("next_report_id", function(err, reportId) {
      var score;
      if (err) {
        return utils.showDBError(callback, client);
      }
      score = getDateNumber(dateStr);
	  //console.log('getDateNumber dateStr:' + dateStr);
	  console.log('reportModel-createReport-getDateNumber score:' + score);
      return client.zadd("userid:" + userId + ":reportIds", score, reportId, function(err, reply) {
        if (err) {
          return utils.showDBError(callback, client);
        }
		
        return client.hmset("userid:" + userId + ":reports", "" + reportId + ":date", dateStr, "" + reportId + ":content", content, function(err, reply) {
          if (err) {
            return utils.showDBError(callback, client);
          }
		  
		  // record the report in this week's table for the show in main page
		  return getUserName(userId, function(userName){
			return client.hset(dateStr, "" + userId + ":" + userName, content, function(err, reply) {
			  if (err) {
				return utils.showDBError(callback, client);
			  }
		  
			  client.quit();
			  return callback(new Response(1, 'success', reply));
		    });
		  });
        });
      });
    });
  };
  
 exports.updateReport = function(userId, content, dateStr, callback) {
    var client;
    client = utils.createClient();
	
	// get the reportId first
	return client.hgetall("userid:" + userId + ":reports", function(err, reply) {
        var users;
		if (err) {
          return utils.showDBError(callback, client);
        }
		
		// update the report
		var result = false;
		var childOfKey, key, value;
		for (key in reply) {
		  value = reply[key];
          childOfKey = key.split(":");
			
          if (childOfKey[1] == "date") {
			if (value == dateStr) {
			    var reportId = childOfKey[0];
				
				return client.hmset("userid:" + userId + ":reports", "" + reportId + ":date", dateStr, "" + reportId + ":content", content, function(err, reply) {
				  if (err) {
					return utils.showDBError(callback, client);
				  }
				  return getDepartmentId(userId, function(departmentId) {
					// record the report in this week's table for the show in main page
					return getUserName(userId, function(userName){
					  return client.hset(dateStr + ":" + departmentId, "" + userId + ":" + userName, content, function(err, reply) {
						if (err) {
							return utils.showDBError(callback, client);
						}
		 
						client.quit();
						return callback(new Response(1, 'success', reply));
					  });
					});	
				  });
				});
			}
          }		  
        }
	});
  };  
  
  getUserName = function(userId, callback) {
	var client;
	var userName;
    client = utils.createClient();
	// get the departmentId first
	return client.hgetall("users", function(err, reply) {
        var users;
		if (err) {
          return utils.showDBError(callback, client);
        }
		//console.log('getDepartmentId reply:' + reply);
		var result = false;
		var childOfKey, key, value;
		var usersIdList = [];
		for (key in reply) {
		  value = reply[key];
          childOfKey = key.split(":");
		  
		  if (childOfKey[1] == 'user_name') {
			if (childOfKey[0] == userId) {
			  userName = value;
			  console.log('reportModel-getUserName-userName:' + userName);
			  return callback(userName);	  
			}
		  }	
		}
	});	
  }
  
  getDateNumber = function(dateStr) {
    var date, months, year, _ref;
    _ref = dateStr.split("-"), year = _ref[0], months = _ref[1], date = _ref[2];
    if (months.length === 1) {
      months = "0" + months;
    }
    if (date.length === 1) {
      date = "0" + date;
    }
    return parseInt("" + year + months + date);
  };

  exports.hasReport = function(req, callback) {
	var _ref, userId;
	_ref = req.session;
	userId = _ref.userId;
	console.log('reportModel-hasReport userId:' + userId);
	
	// get this week's title of the report
	dateStr = getDateStr(new Date());
	console.log('reportModel-hasReport dateStr:' + dateStr);
	
	var client;
    client = utils.createClient();

	return client.hgetall("userid:" + userId + ":reports", function(err, reply) {
        var users;
		if (err) {
          return utils.showDBError(callback, client);
        }
		
		var result = false;
		// parse the reports info
		var childOfKey, key, value;
		for (key in reply) {
		  value = reply[key];
          childOfKey = key.split(":");
		 
          if (childOfKey[1] == "date") {
            console.log('reportModel-hasReport value:' + value);
			if (value == dateStr) {
				console.log('hasReport return:' + true);
				result = true;
				client.quit()
				return callback(result);
			}
          }		  
        }
		result = false;
		console.log('reportModel-hasReport return:' + result);
		return callback(result);
	});
  };  
  
  exports.getReportContent = function(req, callback) {
	var _ref, userId;

	_ref = req.session;
	userId = _ref.userId;
	// get this week's title of the report
	dateStr = getDateStr(new Date());	
	var client;
    client = utils.createClient();
	console.log('reportModel-getReportContent dateStr:' + dateStr);
	
	return client.hgetall("userid:" + userId + ":reports", function(err, reply) {
        var users;
		if (err) {
          return utils.showDBError(callback, client);
        }
		console.log('reportModel-getReportContent err:' + err);
		console.log('reportModel-getReportContent reply:' + reply);
		
		if (reply == null) {
			console.log('reportModel-getReportContent reply111111111:' + reply);
			var content = content_template;
			return createReport(userId, content, dateStr, function(response) {	
				return callback(content);
			});	
		}
		
		// if the report exists, should get the content and return it
		var result = false;
		var childOfKey, key, value;
		for (key in reply) {
		  value = reply[key];
          childOfKey = key.split(":");
			
          if (childOfKey[1] == "date") {
			if (value == dateStr) {
			    var reportId = childOfKey[0];
				
				return client.hgetall("userid:" + userId + ":reports", function(err, reply) {
					if (err) {
						return utils.showDBError(callback, client);
					}

					for (key in reply) {
						value = reply[key];
						childOfKey = key.split(":");
						if (childOfKey[1] == "content") {
							if (childOfKey[0] == reportId) {
								return callback(value);
							}	
						}
					}
					
					var content = content_template;
					return createReport(userId, content, dateStr, function(response) {	
						return callback(content);
					});					
				});
			}
          }		  
        }
		var content = content_template;
		return createReport(userId, content, dateStr, function(response) {	
			return callback(content);
		});	
	});
  };  
   
  exports.getReports = function(userId, page, numOfPage, callback) {
    var client, end, start;
    client = utils.createClient();
    start = numOfPage * (page - 1);
    if (start < 0) {
      start = 0;
    }
	console.log('reportModel-getReports:' + userId);
	
    end = (numOfPage * page) - 1;
    return client.zrevrange("userid:" + userId + ":reportIds", start, end, function(err, reportIds) {
      var contentArgs, dateArgs, reportId, _i, _len;
      if (err) {
        return utils.showDBError(callback, client);
      }
      if (reportIds && reportIds.length === 0) {
        return callback(new Response(1, 'success', []));
      }
      dateArgs = ["userid:" + userId + ":reports"];
      contentArgs = ["userid:" + userId + ":reports"];
      for (_i = 0, _len = reportIds.length; _i < _len; _i++) {
        reportId = reportIds[_i];
        dateArgs.push("" + reportId + ":date");
        contentArgs.push("" + reportId + ":content");
      }
      return client.hmget(dateArgs, function(err, dates) {
        if (err) {
          return utils.showDBError(callback, client);
        }
        return client.hmget(contentArgs, function(err, contents) {
          var i, len, response, _j;
          if (err) {
            return utils.showDBError(callback, client);
          }
          len = contents.length;
          response = [];
          for (i = _j = 0; 0 <= len ? _j < len : _j > len; i = 0 <= len ? ++_j : --_j) {
            response.push({
              id: reportIds[i],
              date: dates[i],
              content: contents[i]
            });
          }
          client.quit();
          return callback(new Response(1, 'success', response));
        });
      });
    });
  };

  exports.getReportsAll = function(userId, page, numOfPage, callback) {
    var client, end, start;
    client = utils.createClient();
    start = numOfPage * (page - 1);
    if (start < 0) {
      start = 0;
    }
	
    end = (numOfPage * page) - 1;
	//console.log('reportModel-getReportsAll userId:' + userId);
	//console.log('reportModel-getReportsAll page:' + page);
	//console.log('reportModel-getReportsAll numOfPage:' + numOfPage);
	//console.log('reportModel-getReportsAll end:' + end);
	
	var dateStr = getDateStr(new Date());
	
	// init the dateStr, change the page will change the dateStr
	if (page == '1') {
		
	} 
	
	console.log('reportModel-getReportsAll dateStr:' + dateStr);
	
	var response = [];
	var response_new = [];
	return getDepartmentId(userId, function(departmentId) {
	  console.log('reportModel-getReportsAll departmentId:' + departmentId);
	  return getColleagues(departmentId, function(usersIdList) {	
	    console.log('reportModel-getReportsAll usersIdList:' + usersIdList);
		  return getUsersNameList(usersIdList, function(usersNameList) {
		    console.log('reportModel-getReportsAll usersNameList:' + usersNameList);
		    
			return getReportsWeek(departmentId, dateStr, function(response) {
		      // need to sequence the userLists to show in the main page
		      var usersName = usersNameList.sort();
			  console.log('reportModel-getReportsAll usersNameList:' + usersName);
			  var userExistFalg = '0'; 
			  for (var x in usersName) {
			    userExistFalg = '0'; 
				for (var y in response) {
			      if (response[y].name == usersName[x]) {
					userExistFalg = '1';
					console.log('reportModel-getReportsAll userExistFalg:1:' + usersName[x]);
				    response_new.push({
                      id: response[y].id,
                      date: response[y].date,
                      content: response[y].content	
			        });
			      }
			    }
				
				// for the user who had not completed the report in the department
				if (userExistFalg == '0') {
				  console.log('reportModel-getReportsAll userExistFalg:0:' + usersName[x]);
				  response_new.push({
                    id: '0',
                    date: usersName[x],
                    content: 'Not update the report yet!'	 
			      });
				}
		      }
		      return callback(new Response(1, 'success', response_new));
		    });
		  });
	  });
	}); 
  };

  // get the usersNameList from the usersIdList
  getUsersNameList = function (usersIdList, callback) {
	var client;
    client = utils.createClient();
	
	return client.hgetall("users", function(err, reply) {
	  if (err) {
        return utils.showDBError(callback, client);
      }
	  //console.log('getDepartmentId reply:' + reply);
	  var result = false;
	  var childOfKey, key, value;
	  var usersNameList = [];
	
      for (x in usersIdList) {	
		
		for (key in reply) {
		  value = reply[key];
          childOfKey = key.split(":");
		  
		  if (childOfKey[1] == 'user_name') {
			if (childOfKey[0] == usersIdList[x]	) {
			  var userName = value;
			  
			  usersNameList.push(userName);
			  console.log('reportModel-getUsersNameList userName:' + userName);					
			}
		  }	
		}
	  }
		return callback(usersNameList);
	});	
	
  }
  
  // get all the reports from the table dateStr
  getReportsWeek = function(departmentId, dateStr, callback) {
    console.log('reportModel-getReportsWeek-departmentId:' + departmentId);
	console.log('reportModel-getReportsWeek-dateStr:' + dateStr);
	var client;
    client = utils.createClient();

	return client.hgetall(dateStr + ":" + departmentId, function(err, reply) {
        var users;
		if (err) {
          return utils.showDBError(callback, client);
        }
		var result = false;
		var childOfKey, key, value;
		var response = [];
		for (key in reply) {
		  value = reply[key];
          childOfKey = key.split(":");
		  var userId = childOfKey[0];
		  var userName = childOfKey[1];
		  var content = value;
		  
		  response.push({
                id: userId,
				name: userName,
                date: userName,   //date: dateStr, // change the dateStr to userName in the main page
                content: content	
		  });
		}
		return callback(response);
	});	 
  }
  
  getReport = function(userId, dateStr) {
	console.log('reportModel-getReport userId:' + userId);
	console.log('reportModel-getReport dateStr:' + dateStr);
    var content = 'null';
	var client;
    client = utils.createClient();
	// get the departmentId first
	return client.hgetall("userid:" + userId + ":reports", function(err, reply) {
        var users;
		
		// get the report's content
		
		var childOfKey, key, value;
		for (key in reply) {
		  value = reply[key];
          childOfKey = key.split(":");
			
          if (childOfKey[1] == "date") {
			if (value == dateStr) {
			    var reportId = childOfKey[0];
				
				console.log('reportModel-getReport reportId:' + reportId);

				return client.hgetall("userid:" + userId + ":reports", function(err, reply) {
					if (err) {
						return utils.showDBError(callback, client);
					}

					for (key in reply) {
						value = reply[key];
						childOfKey = key.split(":");
						if (childOfKey[1] == "content") {
							if (childOfKey[0] == reportId) {
								content = value;
								console.log('getReport content:' + content);
								return content;
							}	
						}
					}
				});	
			}
          }		  
        }	
	});	
  }
  
  getColleagues = function(departmentId, callback) {
	var client;
    client = utils.createClient();
	// get the departmentId first
	return client.hgetall("users", function(err, reply) {
		if (err) {
          return utils.showDBError(callback, client);
        }
		//console.log('getDepartmentId reply:' + reply);
		var result = false;
		var childOfKey, key, value;
		var usersIdList = [];
		for (key in reply) {
		  value = reply[key];
          childOfKey = key.split(":");
		  
		  if (childOfKey[1] == 'department_id') {
			if (value == departmentId	) {
			  var userId = childOfKey[0];
			  
			  usersIdList.push(userId);
			  console.log('reportModel-getColleagues userId:' + userId);					
			}
		  }	
		}
		return callback(usersIdList);
	});	
  }
  
  getDepartmentId = function(userId, callback) {
	var client;
    client = utils.createClient();
	// get the departmentId first
	return client.hgetall("users", function(err, reply) {
        var users;
		if (err) {
          return utils.showDBError(callback, client);
        }
		//console.log('getDepartmentId reply:' + reply);
		var result = false;
		var childOfKey, key, value;
		for (key in reply) {
		  value = reply[key];
          childOfKey = key.split(":");
		  
		  if (childOfKey[1] == 'department_id') {
			if (childOfKey[0] == userId) {
			  console.log('reportModel-getDepartmentId reply:' + value);
			  return callback(value);
			}
		  }	
		}
	});	
  };
  
  exports.getReportNum = function(userId, callback) {
    var client;
    client = utils.createClient();
    return client.zcount("userid:" + userId + ":reportIds", "-inf", "+inf", function(err, count) {
      if (err) {
        return utils.showDBError(callback, client);
      }
      client.quit();
      return callback(new Response(1, 'success', count));
    });
  };

  exports.deleteReport = function(userId, reportId, callback) {
    var client;
    client = utils.createClient();
    return client.zrem("userid:" + userId + ":reportIds", reportId, function(err, reply) {
      if (err) {
        return utils.showDBError(callback, client);
      }
      return client.hdel("userid:" + userId + ":reports", "" + reportId + ":date", "" + reportId + ":content", function(err, reply) {
        if (err) {
          return utils.showDBError(callback, client);
        }
        client.quit();
        return callback(new Response(1, 'success', reply));
      });
    });
  };

  exports.getSubordinateUserAndDepartment = function(userId, callback) {
    var client;
    client = utils.createClient();
    return client.hgetall("users", function(err, users) {
      var children, getSubordinateIds, subordinateIds, subordinateUsers, user, userArray, userObjs, userTree, _i, _j, _len, _len1, _ref;
      if (err) {
        return utils.showDBError(callback, client);
      }
      _ref = parseUsers(users), userObjs = _ref[0], userArray = _ref[1];
      userTree = getDepartTreeData(userArray, {});
      subordinateIds = [];
      children = [];
      for (_i = 0, _len = userTree.length; _i < _len; _i++) {
        user = userTree[_i];
        if (user["id"] === userId) {
          children = user["children"];
          break;
        }
      }
      getSubordinateIds = function(children, subordinateIds) {
        var _j, _len1, _results;
        _results = [];
        for (_j = 0, _len1 = children.length; _j < _len1; _j++) {
          user = children[_j];
          subordinateIds.push(user["id"]);
          if (user["children"]) {
            _results.push(getSubordinateIds(user["children"], subordinateIds));
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      };
      getSubordinateIds(children, subordinateIds);
      subordinateUsers = [];
      for (_j = 0, _len1 = subordinateIds.length; _j < _len1; _j++) {
        userId = subordinateIds[_j];
        subordinateUsers.push(userObjs[userId]);
      }
      return client.hgetall("departments", function(err, departments) {
        var department, departmentId, departmentObjs, departmentTree, getUserDepartmentTreeData, subordinateDepartmentObjs, subordinateDepartments, _, _k, _len2, _ref1;
        if (err) {
          return utils.showDBError(callback, client);
        }
        _ref1 = parseDepartments(departments), departmentObjs = _ref1[0], _ = _ref1[1];
        subordinateDepartmentObjs = {};
        for (_k = 0, _len2 = subordinateUsers.length; _k < _len2; _k++) {
          user = subordinateUsers[_k];
          if (user["departmentId"]) {
            departmentId = user["departmentId"];
            subordinateDepartmentObjs[departmentId] = departmentObjs[departmentId];
          }
        }
        subordinateDepartments = [];
        for (_ in subordinateDepartmentObjs) {
          department = subordinateDepartmentObjs[_];
          subordinateDepartments.push(department);
        }
        departmentTree = getDepartTreeData(subordinateDepartments, subordinateDepartmentObjs);
        getUserDepartmentTreeData = function(departmentTree) {
          var _l, _len3, _len4, _m, _ref2, _results;
          _results = [];
          for (_l = 0, _len3 = departmentTree.length; _l < _len3; _l++) {
            department = departmentTree[_l];
            if (!department["node"]) {
              continue;
            }
            departmentId = department["id"];
            if ((_ref2 = department["children"]) == null) {
              department["children"] = [];
            }
            for (_m = 0, _len4 = subordinateUsers.length; _m < _len4; _m++) {
              user = subordinateUsers[_m];
              if (user["departmentId"] !== departmentId) {
                continue;
              }
              department["children"].push({
                id: user["id"],
                label: user["name"]
              });
            }
            if (department["children"]) {
              _results.push(getUserDepartmentTreeData(department["children"]));
            } else {
              _results.push(void 0);
            }
          }
          return _results;
        };
        getUserDepartmentTreeData(departmentTree);
        client.quit();
        return callback(new Response(1, 'success', departmentTree));
      });
    });
  };

  parseUsers = function(data) {
    var childOfKey, key, key2, result, resultObj, userId, value, value2, _ref;
    resultObj = {};
    for (key in data) {
      value = data[key];
      childOfKey = key.split(":");
      userId = childOfKey[0];
      if ((_ref = resultObj[userId]) == null) {
        resultObj[userId] = {
          id: userId
        };
      }
      if (childOfKey[1] === "user_name") {
        resultObj[userId]["name"] = value;
      } else if (childOfKey[1] === "department_id") {
        resultObj[userId]["departmentId"] = value;
      } else if (childOfKey[1] === "superior_id") {
        resultObj[userId]["pid"] = value;
      }
    }
    result = [];
    for (key2 in resultObj) {
      value2 = resultObj[key2];
      result.push(value2);
    }
    return [resultObj, result];
  };

  parseDepartments = function(data) {
    var childOfKey, departmentId, key, key2, result, resultObj, value, value2, _ref;
    resultObj = {};
    for (key in data) {
      value = data[key];
      childOfKey = key.split(":");
      departmentId = childOfKey[0];
      if ((_ref = resultObj[departmentId]) == null) {
        resultObj[departmentId] = {
          id: departmentId
        };
      }
      if (childOfKey[1] === "name") {
        resultObj[departmentId]["name"] = value;
      } else if (childOfKey[1] === "pid") {
        resultObj[departmentId]["pid"] = value;
      }
    }
    result = [];
    for (key2 in resultObj) {
      value2 = resultObj[key2];
      result.push(value2);
    }
    return [resultObj, result];
  };

  getDepartTreeData = function(departs, allObjs) {
    var findChidren, node, rootnode, treeData, value, _i, _j, _len, _len1;
    treeData = [];
    for (_i = 0, _len = departs.length; _i < _len; _i++) {
      value = departs[_i];
      rootnode = {
        label: value.name,
        id: value.id,
        node: 1
      };
      if (!(value.pid && allObjs[value.pid])) {
        treeData.push(rootnode);
      }
    }
    findChidren = function(node, departs) {
      var childNode, _j, _len1, _results;
      _results = [];
      for (_j = 0, _len1 = departs.length; _j < _len1; _j++) {
        value = departs[_j];
        if (value.pid === node.id) {
          if (!node.children) {
            node.children = [];
          }
          childNode = {
            label: value.name,
            id: value.id,
            node: 1
          };
          node.children.push(childNode);
          _results.push(findChidren(childNode, departs));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };
    for (_j = 0, _len1 = treeData.length; _j < _len1; _j++) {
      node = treeData[_j];
      findChidren(node, departs);
    }
    return treeData;
  };

}).call(this);
